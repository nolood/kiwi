//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type Session string

const (
	Session_FillProfileAge      Session = "fill_profile_age"
	Session_FillProfileName     Session = "fill_profile_name"
	Session_FillProfileLocation Session = "fill_profile_location"
	Session_FillProfilePhoto    Session = "fill_profile_photo"
	Session_FillProfileGender   Session = "fill_profile_gender"
	Session_FillProfileAbout    Session = "fill_profile_about"
	Session_FillBlacklist       Session = "fill_blacklist"
	Session_None                Session = "none"
)

func (e *Session) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "fill_profile_age":
		*e = Session_FillProfileAge
	case "fill_profile_name":
		*e = Session_FillProfileName
	case "fill_profile_location":
		*e = Session_FillProfileLocation
	case "fill_profile_photo":
		*e = Session_FillProfilePhoto
	case "fill_profile_gender":
		*e = Session_FillProfileGender
	case "fill_profile_about":
		*e = Session_FillProfileAbout
	case "fill_blacklist":
		*e = Session_FillBlacklist
	case "none":
		*e = Session_None
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for Session enum")
	}

	return nil
}

func (e Session) String() string {
	return string(e)
}
