//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	TelegramID   postgres.ColumnInteger
	FirstName    postgres.ColumnString
	LastName     postgres.ColumnString
	Username     postgres.ColumnString
	LanguageCode postgres.ColumnString
	IsPremium    postgres.ColumnBool
	PhotoURL     postgres.ColumnString
	Session      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		TelegramIDColumn   = postgres.IntegerColumn("telegram_id")
		FirstNameColumn    = postgres.StringColumn("first_name")
		LastNameColumn     = postgres.StringColumn("last_name")
		UsernameColumn     = postgres.StringColumn("username")
		LanguageCodeColumn = postgres.StringColumn("language_code")
		IsPremiumColumn    = postgres.BoolColumn("is_premium")
		PhotoURLColumn     = postgres.StringColumn("photo_url")
		SessionColumn      = postgres.StringColumn("session")
		allColumns         = postgres.ColumnList{IDColumn, TelegramIDColumn, FirstNameColumn, LastNameColumn, UsernameColumn, LanguageCodeColumn, IsPremiumColumn, PhotoURLColumn, SessionColumn}
		mutableColumns     = postgres.ColumnList{TelegramIDColumn, FirstNameColumn, LastNameColumn, UsernameColumn, LanguageCodeColumn, IsPremiumColumn, PhotoURLColumn, SessionColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		TelegramID:   TelegramIDColumn,
		FirstName:    FirstNameColumn,
		LastName:     LastNameColumn,
		Username:     UsernameColumn,
		LanguageCode: LanguageCodeColumn,
		IsPremium:    IsPremiumColumn,
		PhotoURL:     PhotoURLColumn,
		Session:      SessionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
